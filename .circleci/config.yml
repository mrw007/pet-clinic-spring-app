# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

jobs: # a collection of steps
  build-and-test: # runs not using Workflows must have a `build` job as entry point

    working_directory: ~/pet-clinic-spring-app # directory where steps will run

    docker: # run the steps with Docker
      - image: cimg/openjdk:18.0.1 # ...with this image as the primary container; this is where all `steps` will run

    steps: # a collection of executable commands

      - checkout # check out source code to working directory

      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: pet-clinic-spring-app-{{ checksum "pom.xml" }}
      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Build
          command: mvn -B -DskipTests clean package

      - run: mvn dependency:go-offline # gets the project dependencies

      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: pet-clinic-spring-app-{{ checksum "pom.xml" }}

      - run:
          name: Test
          command: mvn package # run the actual tests

      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard.
          # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: target/surefire-reports

      - store_artifacts: # store the uberjar as an artifact
          # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: target/pet-clinic-spring-app-0.0.1-SNAPSHOT.jar
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples
## Invoke jobs via workflows
## See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
#    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
#version: 2.1
#
## Define a job to be invoked later in a workflow.
## See: https://circleci.com/docs/2.0/configuration-reference/#jobs
#jobs:
#  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
#  build-and-test:
#    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
#    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
#    # Be sure to update the Docker image tag below to openjdk version of your application.
#    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
#    docker:
#      - image: cimg/openjdk:18.0
#    # Add steps to the job
#    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
#    steps:
#      # Checkout the code as the first step.
#      - checkout
#      # Use mvn clean and package as the standard maven build phase
#      - run:
#          name: Build
#          command: mvn -B -DskipTests clean package
#      # Then run your tests!
#      - run:
#          name: Test
#          command: mvn test
#
## Invoke jobs via workflows
## See: https://circleci.com/docs/2.0/configuration-reference/#workflows
#workflows:
#  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
#    # Inside the workflow, you define the jobs you want to run.
#    jobs:
#      - build-and-test
